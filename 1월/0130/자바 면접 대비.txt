=== 하정호
1. 학기 언제든 들어가도 따라갈 수 있는 수준
2. Spring으로 기본적인 MVC 구현(Web MVC, DTO, Validation, JPA), 테스팅이랑 API 문서화(Spring rest Docs), 그리고 로그인 구현 가능
3. 부족하지만 AWS로 배포 할 수 있음.
4. 지난 부트캠프에서 프로젝트 진행할 때 팀장을 맡았고, 부족한 팀원을 도맡아서 케어하고 같이 학습 및 공부시켜주어 나아감
5. 커뮤니케이션 우수(팀장, 스터디장 2개, 저번 스터디)
6. 블로그, 깃헙 공개 쌉가능

=== 메인
# 캡상추다
### 상속
: 기존의 클래스를 확장하기 위한 요소(기존 클래스를 재활용하는 방법이라고도 함)
: 다른 표현으로는, 연관된 일련의 클래스들에 공통적인 규약을 정의하기 위한 문법 요소
### 상속관계
- 상위 클래스
- 하위 클래스
### extends 키워드
### 장점
- 다형적 표현 가능
- 코드의 중복 줄임
### 단일 상속
- 다중 상속 불가(인터페이스)
### 다형적 표현
- 상위 클래스 참조형과 하위 클래스 인스턴스
: 상위보다 하위의 멤버가 많이 때문(물리적으로 더 큰 범위)
### this, this(), super, super()키워드
### Object 클래스
: 최상위 클래스

### 캡슐화
: 객체의 데이터(멤버)를 외부로부터 보호하는 것
### 패키지
### 접근 제어자
- public : 모든 범위
- protected : 타 패키지, 동일 패키지, 동일 클래스
- default : 동일 패키지, 동일 클래스
- private :  동일 클래스
### getter, setter

### 다형성
: 하나의 객체가 여러 가지 형태를 가질 수 있는 성질
: 한 타입의 참조변수를 통해 여러 타입의 객체를 참조하는 것
: 상위 참조형으로 하위 참조형 참조 가능

###추상화
### abstract 제어자
### 추상 메서드
: 메서드 시그니처 없음, 메서드 바디만 존재
### 추상 클래스
: 하나 이상의 추상 메서드를 포함한 클래스
### 장점
- 유연함
- 오류 최소화
### 인터페이스
- 추상 메서드와 상수만으로 이루어진 집합체
- 내부 모든 필드는 `public static final`임 (생략 가능)
- 내부 모든 메서드는 `public abstract`임 (생략 가능)
### implements 키워드
### 인터페이스 다중 구현 가능
: 필드, 메서드가 모두 미완성이기 때문에 충돌 안남

# 스프링 MVC
### Spring Web MVC == Spring MVC
: 서블릿 api 기반으로 웹 계층을 담당하는 Spring의 모듈
: 클라이언트의 요청을 편리하게 처리해줌
### Model
: 작업의 처리 결과 데이터
### View
: Model 데이터를 이용한 리소스를 프론트에 제공하는 역할
### Controller
: 클라이언트의 요청을 직접적으로 받는 엔드포인트

# HTTP 상태코드
- 200, OK : 요청 성공
- 201, Created : 요청 성공 및 새 리소스(response)생성
- 400, Bad Request : 요청 이해 못함
- 404, Not Found : 요청받은 리소스를 찾을 수 없음
- 500, Internal Server Error : 서버 처리 방법 모름

# 에러와 예외
- 에러 : 복구하기 어려운 수준의 오류, 스택오버플로우
- 예외 : 잘못된 사용, 코딩으로 인한 오류

# 컬렉션
- List (배열)
1. ArrayList
2. LinkedList
- Set (객체 중복 허용 안함)
1. HashSet
2. TreeSet
- Map (키-값)
1. HashMap

# 메서드 오버로딩, 오버라이딩
- 오버로딩
: 하나의 클래스 안에 같은 이름의 여러 메서드
- 오버라이딩
: 상속 관계 오버라이딩

=== 비전공 트랙 시간표
제어문
배열
클래스와 객체
객체배열관리
상속, 다형성
추상클래스
인터페이스, 제네릭
컬렉션
예외처리, 객체관리종합
파일입출력
html, css

=== 전공 트랙 시간표
캡상추다
예외
컬렉션
파일입출력
XML 파싱
DB